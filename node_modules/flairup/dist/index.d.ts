type StyleObject = Partial<CSSStyleDeclaration>;
type Pseudo = `:${string}`;
type MediaQuery = `@media ${string}`;
type CSSVariablesObject = Record<`--${string}`, string>;
type ParentClass = `.${string}`;
type ClassSet = Set<string>;
type Styles = Partial<StyleObject & FlairUpProperties & Chunks>;
type ScopedStyles<K extends string = string> = Record<S<K>, ClassSet>;
type FlairUpProperties = Partial<{
    '.'?: string | string[];
    '--'?: CSSVariablesObject;
}>;
type Chunks = Record<MediaQuery, StyleObject & Record<'--', CSSVariablesObject>> & Record<Pseudo, StyleObject>;
type CreateSheetInput<K extends string> = Partial<Record<K, Styles> | Record<ParentClass, Record<K, Styles>>>;
type S<K extends string> = Exclude<K, ParentClass | '--' | '.' | keyof CSSStyleDeclaration | Pseudo | MediaQuery>;
type createSheetReturn = {
    create: <K extends string>(styles: CreateSheetInput<K>) => ScopedStyles<S<K>> & ScopedStyles<string>;
    getStyle: () => string;
    isApplied: () => boolean;
};

declare function cx(...args: any[]): string;

declare function createSheet(name: string): createSheetReturn;

export { createSheet, cx };
