// src/utils/asArray.ts
function asArray(v) {
  return [].concat(v);
}

// src/utils/joinTruthy.ts
function joinTruthy(arr, delimiter = "") {
  return arr.filter(Boolean).join(delimiter);
}

// src/utils/stableHash.ts
function stableHash(prefix, seed) {
  let hash = 0;
  if (seed.length === 0)
    return hash.toString();
  for (let i = 0; i < seed.length; i++) {
    const char = seed.charCodeAt(i);
    hash = (hash << 5) - hash + char;
    hash = hash & hash;
  }
  return `${prefix ?? "cl"}_${hash.toString(36)}`;
}

// src/utils/stringManipulators.ts
function handlePropertyValue(property, value) {
  if (property === "content") {
    return `"${value}"`;
  }
  return value;
}
function camelCaseToDash(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
}
function joinedProperty(property, value) {
  return `${property}:${value}`;
}
function joinSelectors(classes) {
  return classes.filter(Boolean).map((c) => `.${c}`).join(" ");
}
function appendString(base, line) {
  return base ? `${base}
${line}` : line;
}

// src/Rule.ts
var Rule = class _Rule {
  constructor(sheet, property, value, selector) {
    this.sheet = sheet;
    this.property = property;
    this.value = value;
    this.selector = selector;
    this.property = property;
    this.value = value;
    this.joined = joinedProperty(property, value);
    this.key = joinTruthy([
      this.joined,
      joinSelectors(this.selector.preconditions),
      this.selector.pseudoSelector
    ]);
    this.hash = stableHash(
      this.sheet.name,
      this.joined + joinTruthy(this.selector.preconditions) + (this.selector.pseudoSelector ? this.selector.pseudoSelector : "")
    );
  }
  toString() {
    const selectors = joinTruthy([
      joinSelectors(this.selector.preconditions.concat(this.hash)),
      this.selector.pseudoSelector
    ]);
    return `${selectors} {${_Rule.genRule(this.property, this.value)}}`;
  }
  static genRule(property, value) {
    const transformedProperty = camelCaseToDash(property);
    return joinedProperty(
      transformedProperty,
      handlePropertyValue(property, value)
    ) + ";";
  }
};
var Selector = class _Selector {
  constructor(sheet, scopeName, {
    pseudoSelector,
    preconditions
  } = {}) {
    this.sheet = sheet;
    this.scopeName = scopeName;
    this.preconditions = [];
    this.pseudoSelector = pseudoSelector;
    this.preconditions = preconditions ? asArray(preconditions) : [];
    this.scopeClassName = scopeName;
  }
  addPseudoSelector(pseudoSelector) {
    return new _Selector(this.sheet, this.scopeClassName, {
      pseudoSelector,
      preconditions: this.preconditions
    });
  }
  addPrecondition(precondition) {
    return new _Selector(this.sheet, this.scopeClassName, {
      pseudoSelector: this.pseudoSelector,
      preconditions: this.preconditions.concat(precondition)
    });
  }
  createRule(property, value) {
    return new Rule(this.sheet, property, value, this);
  }
};

// src/utils/is.ts
var is = {
  pseudoSelector: (selector, _) => selector.startsWith(":"),
  mediaQuery: (property, _) => property.startsWith("@media"),
  directClass: (property, _) => property === ".",
  cssVariables: (property, _) => property === "--",
  validProperty: (property, value) => (typeof value === "string" || typeof value === "number") && !is.cssVariables(property, value) && !is.pseudoSelector(property, value) && !is.mediaQuery(property, value),
  topLevelClass: (property, _) => property.startsWith(".") && property.length > 1,
  string: (value) => typeof value === "string"
};

// src/Sheet.ts
var Sheet = class {
  constructor(name) {
    this.name = name;
    // Hash->css
    this.storedStyles = {};
    // styles->hash
    this.storedClasses = {};
    this.style = "";
    this.count = 0;
    this.id = `flairup-${name}`;
    this.styleTag = this.createStyleTag();
  }
  getStyle() {
    return this.style;
  }
  append(css) {
    this.style = appendString(this.style, css);
  }
  apply() {
    this.count++;
    if (!this.styleTag) {
      return;
    }
    this.styleTag.innerHTML = this.style;
  }
  isApplied() {
    return !!this.styleTag;
  }
  createStyleTag() {
    if (typeof document === "undefined" || this.isApplied()) {
      return;
    }
    const styleTag = document.createElement("style");
    styleTag.type = "text/css";
    styleTag.id = this.id;
    document.head.appendChild(styleTag);
    return styleTag;
  }
  addRule(rule) {
    const storedClass = this.storedClasses[rule.key];
    if (is.string(storedClass)) {
      return storedClass;
    }
    this.storedClasses[rule.key] = rule.hash;
    this.storedStyles[rule.hash] = [rule.property, rule.value];
    this.append(rule.toString());
    return rule.hash;
  }
};

// src/utils/forIn.ts
function forIn(obj, fn) {
  for (const key in obj) {
    fn(key.trim(), obj[key]);
  }
}

// src/cx.ts
function cx(...args) {
  const classes = args.reduce((classes2, arg) => {
    if (arg instanceof Set) {
      classes2.push(...arg);
    } else if (typeof arg === "string") {
      classes2.push(arg);
    } else if (Array.isArray(arg)) {
      classes2.push(cx(...arg));
    } else if (typeof arg === "object") {
      Object.entries(arg).forEach(([key, value]) => {
        if (value) {
          classes2.push(key);
        }
      });
    }
    return classes2;
  }, []);
  return joinTruthy(classes, " ").trim();
}

// src/index.ts
function createSheet(name) {
  const sheet = new Sheet(name);
  return {
    create,
    getStyle: sheet.getStyle.bind(sheet),
    isApplied: sheet.isApplied.bind(sheet)
  };
  function create(styles) {
    const scopedStyles = {};
    forIn(styles, (scopeName, styles2) => {
      if (is.topLevelClass(scopeName, styles2)) {
        forIn(styles2, (childScope, value) => {
          const scopeClassName2 = stableHash(sheet.name, childScope);
          const precondition = scopeName.slice(1);
          iterateStyles(
            sheet,
            value,
            new Selector(sheet, scopeClassName2, {
              preconditions: precondition
            })
          ).forEach((className) => {
            addScopedStyle(childScope, className);
          });
        });
        return;
      }
      const scopeClassName = stableHash(sheet.name, scopeName);
      iterateStyles(
        sheet,
        styles2,
        new Selector(sheet, scopeClassName, {})
      ).forEach((className) => {
        addScopedStyle(scopeName, className);
      });
    });
    sheet.apply();
    return scopedStyles;
    function addScopedStyle(name2, className) {
      scopedStyles[name2] = scopedStyles[name2] ?? /* @__PURE__ */ new Set();
      scopedStyles[name2].add(className);
    }
  }
}
function iterateStyles(sheet, styles, selector) {
  const output = /* @__PURE__ */ new Set();
  forIn(styles, (property, value) => {
    let res = [];
    if (is.directClass(property, value)) {
      res = asArray(value);
    } else if (is.mediaQuery(property, value)) {
      res = handleMediaQuery(sheet, value, property, selector);
    } else if (is.cssVariables(property, value)) {
      res = cssVariablesBlock(sheet, value, selector);
    } else if (is.pseudoSelector(property, value)) {
      res = iterateStyles(sheet, value, selector.addPseudoSelector(property));
    } else if (is.validProperty(property, value)) {
      const rule = selector.createRule(property, value);
      sheet.addRule(rule);
      output.add(rule.hash);
    }
    return addEachClass(res, output);
  });
  return output;
}
function addEachClass(list, to) {
  list.forEach((className) => to.add(className));
  return to;
}
function cssVariablesBlock(sheet, styles, selector) {
  const classes = /* @__PURE__ */ new Set();
  const chunkRows = [];
  forIn(styles, (property, value) => {
    if (is.validProperty(property, value)) {
      chunkRows.push(Rule.genRule(property, value));
      return;
    }
    const res = iterateStyles(sheet, value ?? {}, selector);
    addEachClass(res, classes);
  });
  if (chunkRows.length) {
    const output = chunkRows.join(" ");
    sheet.append(
      `${joinSelectors(
        selector.preconditions.concat(selector.scopeClassName)
      )} {${output}}`
    );
  }
  classes.add(selector.scopeClassName);
  return classes;
}
function handleMediaQuery(sheet, styles, mediaQuery, selector) {
  sheet.append(mediaQuery + " {");
  const output = iterateStyles(sheet, styles, selector);
  sheet.append("}");
  return output;
}
export {
  createSheet,
  cx
};
//# sourceMappingURL=index.js.map