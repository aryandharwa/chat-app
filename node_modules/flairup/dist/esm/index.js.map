{"version":3,"sources":["../../src/utils/is.ts","../../src/utils/stableHash.ts","../../src/utils/stringManipulators.ts","../../src/Sheet.ts","../../src/utils/forIn.ts","../../src/cx.ts","../../src/index.ts"],"sourcesContent":["import { CSSVariablesObject, StyleObject, Styles } from '../types.js';\n\n// Selectors\nexport const is = {\n  pseudoSelector: (selector: string, _: unknown): _ is StyleObject =>\n    selector.startsWith(':'),\n  mediaQuery: (property: string, _: unknown): _ is Styles =>\n    property.startsWith('@media'),\n  directClass: (property: string, _: unknown): _ is string | string[] =>\n    property === '.',\n  cssVariables: (property: string, _: unknown): _ is CSSVariablesObject =>\n    property === '--',\n  validProperty: (property: string, value: unknown): value is string =>\n    (typeof value === 'string' || typeof value === 'number') &&\n    !is.cssVariables(property, value) &&\n    !is.pseudoSelector(property, value) &&\n    !is.mediaQuery(property, value),\n  topLevelClass: (property: string, _: unknown): _ is StyleObject =>\n    property.startsWith('.') && property.length > 1,\n  string: (value: unknown): value is string => typeof value === 'string',\n};\n","// Stable hash function.\nexport function stableHash(prefix: string, seed: string): string {\n  let hash = 0;\n  if (seed.length === 0) return hash.toString();\n  for (let i = 0; i < seed.length; i++) {\n    const char = seed.charCodeAt(i);\n    hash = (hash << 5) - hash + char;\n    hash = hash & hash; // Convert to 32bit integer\n  }\n  return `${prefix ?? 'cl'}_${hash.toString(36)}`;\n}\n","import { ClassList, PropertyValue } from '../types.js';\nimport { is } from './is.js';\n\nexport function genCssRule(\n  classes: ClassList,\n  property: string,\n  value: string,\n): string {\n  return genCssRules(classes, genLine(property, value));\n}\n\nexport function genLine(property: string, value: PropertyValue): string {\n  return `${camelCaseToDash(property)}: ${handlePropertyValue(\n    property,\n    value,\n  )};`;\n}\n\n// Some properties need special handling\nexport function handlePropertyValue(\n  property: string,\n  value: PropertyValue,\n): string | number {\n  if (property === 'content') {\n    return `\"${value}\"`;\n  }\n\n  return value;\n}\n\nexport function genCssRules(classes: ClassList, content: string): string {\n  return `${makeClassName(classes)} ${wrapWithCurlys(content)}`;\n}\n\nexport function wrapWithCurlys(content: string, breakLine = false): string {\n  return [breakLine ? '{\\n' : '{', content, breakLine ? '\\n}' : '}'].join('');\n}\n\nexport function camelCaseToDash(str: string): string {\n  return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nexport function joinedProperty(property: string, value: string): string {\n  return `${property}:${value}`;\n}\n\n// Creates the css line for a chunk\nexport function chunkSelector(className: ClassList, property: string): string {\n  const base = makeClassName(className);\n\n  if (is.pseudoSelector(property)) {\n    return `${base}${property}`;\n  }\n\n  if (is.mediaQuery(property)) {\n    return `${property}`;\n  }\n\n  return base;\n}\n\nexport function makeClassName(classes: ClassList): string {\n  return classes\n    .filter(Boolean)\n    .map((c) => `.${c}`)\n    .join(' ');\n}\n\nexport function appendString(base: string, line: string): string {\n  return base ? `${base}\\n${line}` : line;\n}\n","import { StoredStyles } from './types.js';\nimport { is } from './utils/is.js';\nimport { stableHash } from './utils/stableHash.js';\nimport {\n  appendString,\n  genCssRule,\n  joinedProperty,\n} from './utils/stringManipulators.js';\n\nexport class Sheet {\n  private styleTag: HTMLStyleElement | undefined;\n\n  // Hash->css\n  private storedStyles: StoredStyles = {};\n\n  // styles->hash\n  private storedClasses: Record<string, string> = {};\n  private style: string = '';\n  public count = 0;\n  public id: string;\n\n  constructor(public name: string) {\n    this.id = `flairup-${name}`;\n\n    this.styleTag = this.createStyleTag();\n  }\n\n  getStyle(): string {\n    return this.style;\n  }\n\n  append(css: string): void {\n    this.style = appendString(this.style, css);\n  }\n\n  apply(): void {\n    this.count++;\n\n    if (!this.styleTag) {\n      return;\n    }\n\n    this.styleTag.innerHTML = this.style;\n  }\n\n  isApplied(): boolean {\n    return !!this.styleTag;\n  }\n\n  createStyleTag(): HTMLStyleElement | undefined {\n    // check that we're in the browser and have access to the DOM\n    if (typeof document === 'undefined' || this.isApplied()) {\n      return;\n    }\n\n    const styleTag = document.createElement('style');\n    styleTag.type = 'text/css';\n    styleTag.id = this.id;\n    document.head.appendChild(styleTag);\n    return styleTag;\n  }\n\n  addRule(\n    property: string,\n    value: string,\n    parentClassName: string = '',\n  ): string {\n    // adding the parent class name in case we're scoping under a top level class\n    // this prevents collisions in the hash\n    const key = joinedProperty(property, value) + parentClassName;\n\n    const storedClass = this.storedClasses[key];\n    if (is.string(storedClass)) {\n      return storedClass;\n    }\n\n    const hash = stableHash(this.name, key);\n    this.storedClasses[key] = hash;\n    this.storedStyles[hash] = [property, value];\n\n    this.append(genCssRule([parentClassName, hash], property, value));\n    return hash;\n  }\n}\n","export function forIn<O extends Record<string, unknown>>(\n  obj: O,\n  fn: (key: string, value: O[string]) => void,\n): void {\n  for (const key in obj) {\n    fn(key.trim(), obj[key]);\n  }\n}\n","export function cx(...args: any[]): string {\n  const classes = args.reduce((classes, arg) => {\n    if (arg instanceof Set) {\n      classes.push(...arg);\n    } else if (typeof arg === 'string') {\n      classes.push(arg);\n    } else if (Array.isArray(arg)) {\n      classes.push(cx(...arg));\n    } else if (typeof arg === 'object') {\n      Object.entries(arg).forEach(([key, value]) => {\n        if (value) {\n          classes.push(key);\n        }\n      });\n    }\n\n    return classes;\n  }, []);\n\n  return classes.filter(Boolean).join(' ').trim();\n}\n","import { Sheet } from './Sheet.js';\nimport {\n  CSSVariablesObject,\n  ClassSet,\n  CreateSheetInput,\n  ScopedStyles,\n  StyleObject,\n  Styles,\n  createSheetReturn,\n} from './types.js';\nimport { forIn } from './utils/forIn.js';\nimport { is } from './utils/is.js';\nimport { stableHash } from './utils/stableHash.js';\nimport {\n  chunkSelector,\n  genLine,\n  wrapWithCurlys,\n} from './utils/stringManipulators.js';\n\nexport { cx } from './cx.js';\n\nexport function createSheet(name: string): createSheetReturn {\n  const sheet = new Sheet(name);\n\n  return {\n    create,\n    getStyle: sheet.getStyle.bind(sheet),\n    isApplied: sheet.isApplied.bind(sheet),\n  };\n\n  function create<K extends string>(styles: CreateSheetInput<K>) {\n    const scopedStyles: ScopedStyles<K> = {} as ScopedStyles<K>;\n\n    forIn(styles, (scopeName, styles) => {\n      const scopeClassName = stableHash(sheet.name, scopeName);\n      if (is.topLevelClass(scopeName, styles)) {\n        forIn(styles, (property, value) => {\n          iterateStyles(\n            sheet,\n            value as Styles,\n            scopeClassName,\n            scopeName.slice(1),\n          ).forEach((className: string) => {\n            addScopedStyle(property as unknown as K, className);\n          });\n        });\n        return;\n      }\n      iterateStyles(sheet, styles as Styles, scopeClassName).forEach(\n        (className) => {\n          addScopedStyle(scopeName as K, className);\n        },\n      );\n    });\n\n    sheet.apply();\n\n    return scopedStyles;\n\n    function addScopedStyle(name: K, className: string) {\n      scopedStyles[name as keyof ScopedStyles<K>] =\n        scopedStyles[name as keyof ScopedStyles<K>] ?? new Set<string>();\n      scopedStyles[name as keyof ScopedStyles<K>].add(className);\n    }\n  }\n}\n\nfunction iterateStyles(\n  sheet: Sheet,\n  styles: Styles,\n  scopeClassName: string,\n  parentClassName?: string,\n) {\n  const output: ClassSet = new Set<string>();\n  forIn(styles, (property, value) => {\n    if (is.directClass(property, value)) {\n      return handleAddedClassnames(value).forEach((classes) =>\n        output.add(classes),\n      );\n    }\n\n    if (is.mediaQuery(property, value)) {\n      return handleMediaQuery(sheet, value, property, scopeClassName).forEach(\n        (className) => output.add(className),\n      );\n    }\n\n    if (\n      is.pseudoSelector(property, value) ||\n      is.cssVariables(property, value)\n    ) {\n      return handleChunks(sheet, value, property, scopeClassName).forEach(\n        (classes) => output.add(classes),\n      );\n    }\n\n    if (is.validProperty(property, value)) {\n      const ruleClassName = sheet.addRule(property, value, parentClassName);\n      return output.add(ruleClassName);\n    }\n  });\n\n  return output;\n}\n\nfunction handleAddedClassnames(classes: string | string[]) {\n  return [].concat(classes as unknown as []);\n}\n\nfunction handleChunks(\n  sheet: Sheet,\n  styles: StyleObject | CSSVariablesObject,\n  property: string,\n  scopeClassName: string,\n) {\n  const classes: ClassSet = new Set<string>();\n\n  const chunkRows: string[] = [];\n  forIn(styles, (property: string, value) => {\n    if (is.validProperty(property, value)) {\n      chunkRows.push(genLine(property, value));\n      return;\n    }\n\n    iterateStyles(sheet, value ?? {}, scopeClassName).forEach((className) =>\n      classes.add(className),\n    );\n  });\n\n  if (chunkRows.length) {\n    const output = chunkRows.join(' ');\n    sheet.append(\n      `${chunkSelector([scopeClassName], property)} ${wrapWithCurlys(\n        output,\n        true,\n      )}`,\n    );\n  }\n\n  classes.add(scopeClassName);\n  return classes;\n}\n\nfunction handleMediaQuery(\n  sheet: Sheet,\n  styles: Styles,\n  property: string,\n  scopeClassName: string,\n) {\n  sheet.append(chunkSelector([scopeClassName], property) + ' {');\n\n  const output = iterateStyles(sheet, styles, scopeClassName);\n\n  sheet.append('}');\n\n  return output;\n}\n"],"mappings":"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","names":["classes","styles","name","property"]}